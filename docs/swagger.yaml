basePath: /api/v1
definitions:
  models.CreateMessageRequest:
    properties:
      recipient:
        description: Recieving user
        example: 2
        type: integer
      sender:
        description: Sending user
        example: 1
        type: integer
      text:
        description: Message text
        example: A message that need to be sent
        type: string
    required:
    - text
    type: object
  models.CreateUserRequest:
    properties:
      about:
        description: Short user self-description
        example: Some useful and interesting info
        maxLength: 1000
        type: string
      birthday:
        description: User birthday
        example: "2022-01-01"
        type: string
      country:
        description: User country code
        example: RU
        type: string
      country_region:
        description: User country region code
        example: RU-PER
        type: string
      currency:
        description: User preferred currency code
        example: RUB
        type: string
      email:
        description: User main e-mail
        example: example@example.com
        maxLength: 320
        type: string
      gender:
        allOf:
        - $ref: '#/definitions/models.Gender'
        description: User gender
        example: MALE
      language:
        description: User preferred language code
        example: ru_RU
        type: string
      login:
        description: User login
        example: user
        maxLength: 255
        minLength: 3
        type: string
      name:
        description: User full name
        example: User Usersson
        maxLength: 1500
        type: string
      password:
        description: User password
        example: password
        minLength: 5
        type: string
      phone:
        description: User main phone number
        example: "+78005553535"
        type: string
      timezone:
        description: User timezone
        example: UTC
        type: string
    required:
    - birthday
    - country
    - currency
    - gender
    - language
    - login
    - name
    - password
    - timezone
    type: object
  models.EditUserRequest:
    properties:
      about:
        description: Short user self-description
        example: Some useful and interesting info
        maxLength: 1000
        type: string
      birthday:
        description: User birthday
        example: "2022-01-01"
        type: string
      country:
        description: User country code
        example: RU
        type: string
      country_region:
        description: User country region code
        example: RU-PER
        type: string
      currency:
        description: User preferred currency code
        example: RUB
        type: string
      email:
        description: User main e-mail
        example: example@example.com
        maxLength: 320
        type: string
      gender:
        allOf:
        - $ref: '#/definitions/models.Gender'
        description: User gender
        example: MALE
      language:
        description: User preferred language code
        example: ru_RU
        type: string
      login:
        description: User login
        example: user
        maxLength: 255
        minLength: 3
        type: string
      name:
        description: User full name
        example: User Usersson
        maxLength: 1500
        type: string
      phone:
        description: User main phone number
        example: "+78005553535"
        type: string
      timezone:
        description: User timezone
        example: UTC
        type: string
    required:
    - birthday
    - country
    - currency
    - gender
    - language
    - login
    - name
    - timezone
    type: object
  models.Gender:
    enum:
    - ""
    - MALE
    - FEMALE
    type: string
    x-enum-varnames:
    - Undefined
    - Male
    - Female
  models.GetMessagesResponse:
    properties:
      items:
        description: Found items
        items:
          $ref: '#/definitions/models.MessageItem'
        type: array
      page_number:
        description: Number of returned page
        type: integer
      page_size:
        description: Max page size
        type: integer
      total_items:
        description: Total count of found items
        type: integer
    type: object
  models.GetUsersResponse:
    properties:
      items:
        description: Found items
        items:
          $ref: '#/definitions/models.UserItem'
        type: array
      page_number:
        description: Number of returned page
        type: integer
      page_size:
        description: Max page size
        type: integer
      total_items:
        description: Total count of found items
        type: integer
    type: object
  models.MessageData:
    properties:
      text:
        description: Message text
        example: A message that need to be sent
        type: string
    required:
    - text
    type: object
  models.MessageItem:
    properties:
      edited:
        description: Message last edit time
        type: string
      id:
        description: Message id
        type: string
      is_received:
        description: Whether message was received
        type: boolean
      originalID:
        description: Original message id
        type: string
      recipient:
        description: Recieving user
        example: 2
        type: integer
      sender:
        description: Sending user
        example: 1
        type: integer
      sent:
        description: Message creation time
        type: string
      text:
        description: Message text
        type: string
    required:
    - edited
    - id
    - is_received
    - sent
    - text
    type: object
  models.NewEntityResponse-int64:
    properties:
      id:
        type: integer
    type: object
  models.NewEntityResponse-string:
    properties:
      id:
        type: string
    type: object
  models.PasswordData:
    description: Password definition
    properties:
      password:
        description: User password
        example: password
        minLength: 5
        type: string
    required:
    - password
    type: object
  models.UserData:
    description: User full info
    properties:
      about:
        description: Short user self-description
        example: Some useful and interesting info
        maxLength: 1000
        type: string
      birthday:
        description: User birthday
        example: "2022-01-01"
        type: string
      country:
        description: User country code
        example: RU
        type: string
      country_region:
        description: User country region code
        example: RU-PER
        type: string
      currency:
        description: User preferred currency code
        example: RUB
        type: string
      email:
        description: User main e-mail
        example: example@example.com
        maxLength: 320
        type: string
      gender:
        allOf:
        - $ref: '#/definitions/models.Gender'
        description: User gender
        example: MALE
      language:
        description: User preferred language code
        example: ru_RU
        type: string
      login:
        description: User login
        example: user
        maxLength: 255
        minLength: 3
        type: string
      name:
        description: User full name
        example: User Usersson
        maxLength: 1500
        type: string
      phone:
        description: User main phone number
        example: "+78005553535"
        type: string
      timezone:
        description: User timezone
        example: UTC
        type: string
    required:
    - birthday
    - country
    - currency
    - gender
    - language
    - login
    - name
    - timezone
    type: object
  models.UserItem:
    description: User short info item
    properties:
      birthday:
        description: User birthday
        example: "2022-01-01"
        type: string
      gender:
        allOf:
        - $ref: '#/definitions/models.Gender'
        description: User gender
        example: MALE
      id:
        description: User ID
        type: integer
      login:
        description: User login
        example: user
        maxLength: 255
        minLength: 3
        type: string
      name:
        description: User full name
        example: User Usersson
        maxLength: 1500
        type: string
    required:
    - birthday
    - gender
    - login
    - name
    type: object
info:
  contact: {}
  description: This is a Social Nyetwork server.
  license:
    name: WTFPL 2.0
    url: http://www.wtfpl.net/txt/copying/
  title: Social Nyetwork Swagger
  version: "1.0"
paths:
  /messages:
    get:
      consumes:
      - application/json
      description: Get list of messages by filters
      parameters:
      - description: Sending user id
        in: query
        name: from
        required: true
        type: integer
      - description: Receiving user id
        in: query
        name: to
        required: true
        type: integer
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetMessagesResponse'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - TokenAuth: []
      summary: Get messages
      tags:
      - messages
    post:
      consumes:
      - application/json
      description: Create new message, sent from one user to another
      parameters:
      - description: New message data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.CreateMessageRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.NewEntityResponse-string'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - TokenAuth: []
      summary: Create message
      tags:
      - messages
  /messages/{id}:
    delete:
      consumes:
      - application/json
      description: Delete message
      parameters:
      - description: Message ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - TokenAuth: []
      summary: Delete message
      tags:
      - messages
    put:
      consumes:
      - application/json
      description: Update message text
      parameters:
      - description: Message ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated message data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.MessageData'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - TokenAuth: []
      summary: Edit message
      tags:
      - messages
  /users:
    get:
      consumes:
      - application/json
      description: Search users by some filters
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetUsersResponse'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - TokenAuth: []
      summary: Search users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create new user with set password
      parameters:
      - description: New user data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.NewEntityResponse-int64'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Create user
      tags:
      - users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - TokenAuth: []
      summary: Delete user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Get user info by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserData'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - TokenAuth: []
      summary: Get full user info
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update user information
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated user data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.EditUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - TokenAuth: []
      summary: Edit user info
      tags:
      - users
  /users/{id}/password:
    put:
      consumes:
      - application/json
      description: Change user password
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: New password data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.PasswordData'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - TokenAuth: []
      summary: Change user password
      tags:
      - users
  /users/login:
    post:
      consumes:
      - application/json
      description: Logs user in
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Log in
      tags:
      - users
  /users/logout:
    post:
      consumes:
      - application/json
      description: Logs user out
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - TokenAuth: []
      summary: Log out
      tags:
      - users
swagger: "2.0"
tags:
- description: Message service
  name: messages
- description: User service
  name: users
